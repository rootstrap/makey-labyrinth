var TILE_SIZE = 78;
var BOUNCE_MOVE = 20;
var JUMP_RESIZE = 10;
var GRID_LENGTH = 8;
var TIMEOUT = 600;
var H_HOLE = 8;
var V_HOLE = 9;
tile_index = Math.floor((Math.random() * 4));
lose = false;
allMovements = [];

var map = {
    cols: GRID_LENGTH,
    rows: GRID_LENGTH,
    tsize: TILE_SIZE,
    tiles: [[
        1, 1, 1, 5, 1, 1, 1, 1,
        1, 1, 1, 7, 8, 3, 6, 1,
        1, 1, 1, 1, 1, 1, 5, 1,
        1, 1, 1, 1, 1, 1, 9, 1,
        1, 1, 2, 3, 3, 3, 4, 1,
        1, 1, 5, 1, 1, 1, 1, 1,
        1, 1, 5, 1, 1, 1, 1, 1,
        2, 3, 4, 1, 1, 1, 1, 1
    ], [
        1, 1, 1, 1, 5, 1, 1, 1,
        1, 1, 1, 1, 7, 6, 1, 1,
        1, 1, 1, 1, 1, 9, 1, 1,
        1, 1, 1, 1, 1, 7, 6, 1,
        2, 3, 6, 1, 1, 1, 5, 1,
        5, 1, 5, 1, 1, 2, 4, 1,
        5, 1, 5, 1, 1, 5, 1, 1,
        5, 1, 7, 3, 8, 4, 1, 1
    ], [
        1, 1, 1, 1, 5, 1, 1, 1,
        1, 1, 1, 1, 9, 1, 1, 1,
        1, 2, 8, 3, 4, 1, 1, 1,
        1, 5, 1, 1, 1, 1, 1, 1,
        1, 7, 3, 3, 3, 3, 6, 1,
        1, 1, 1, 1, 1, 1, 5, 1,
        1, 1, 1, 2, 3, 3, 4, 1,
        1, 1, 1, 5, 1, 1, 1, 1
    ], [
        1, 1, 2, 8, 3, 4, 1, 1,
        1, 2, 4, 1, 1, 1, 1, 1,
        1, 9, 1, 1, 1, 1, 1, 1,
        1, 7, 6, 1, 1, 1, 1, 1,
        1, 1, 7, 6, 1, 1, 1, 1,
        1, 1, 1, 5, 1, 1, 1, 1,
        1, 1, 1, 7, 6, 1, 1, 1,
        1, 1, 1, 1, 7, 3, 3, 6
    ]],
    getTileAux: function(col, row) {
        return this.tiles[tile_index][row * GRID_LENGTH + col];
    },
};

movements = {
  allMovements,
  getMovement: function(pos){
    return this.allMovements[pos];
  },

}

bounceUp = function(cont, bounce){
  if (cont % 2 == 1)
  {
    this.chip.style.bottom = parseInt(this.chip.style.bottom) - BOUNCE_MOVE + 'px';
  }
  else
  {
    this.chip.style.bottom = parseInt(this.chip.style.bottom) + BOUNCE_MOVE + 'px';
  }
  cont++;
  if (cont == 4)
  {
    bounce = false;
    cont = 0;
  }
    this.chip.style.transitionDuration = "1s";
    return [cont, bounce];
}

bounceDown = function(cont, bounce){
  if (cont % 2 == 1)
  {
    this.chip.style.bottom = parseInt(this.chip.style.bottom) + BOUNCE_MOVE + 'px';
  }
  else
  {
    this.chip.style.bottom = parseInt(this.chip.style.bottom) - BOUNCE_MOVE + 'px';
  }
  cont++;
  if (cont == 4)
  {
    bounce = false;
    cont = 0;
  }
    this.chip.style.transitionDuration = "1s";
    return [cont, bounce];
}

bounceLeft = function(cont, bounce){
  if (cont % 2 == 1)
  {
    this.chip.style.left = parseInt(this.chip.style.left) + BOUNCE_MOVE + 'px';
  }
  else
  {
    this.chip.style.left = parseInt(this.chip.style.left) - BOUNCE_MOVE + 'px';
  }
  cont++;
  if (cont == 4)
  {
    bounce = false;
    cont = 0;
  }
    this.chip.style.transitionDuration = "1s";
    return [cont, bounce];
}

bounceRight = function(cont, bounce){
  if (cont % 2 == 1)
  {
    this.chip.style.left = parseInt(this.chip.style.left) - BOUNCE_MOVE + 'px';
  }
  else
  {
    this.chip.style.left = parseInt(this.chip.style.left) + BOUNCE_MOVE + 'px';
  }
  cont++;
  if (cont == 4)
  {
    bounce = false;
    cont = 0;
  }
    this.chip.style.transitionDuration = "1s";
    return [cont, bounce];
}

moveUp = function(){
    this.chip.style.transitionDuration = "0.2s";
    this.chip.style.bottom = parseInt(this.chip.style.bottom) + BOUNCE_MOVE + 'px';
}

moveDown = function(){
  this.chip.style.transitionDuration = "0.2s";
  this.chip.style.bottom = parseInt(this.chip.style.bottom) - BOUNCE_MOVE + 'px';
}

moveLeft = function(){
  this.chip.style.transitionDuration = "0.2s";
  this.chip.style.left = parseInt(this.chip.style.left) - BOUNCE_MOVE + 'px';
}

moveRight = function(){
  this.chip.style.transitionDuration = "0.2s";
  this.chip.style.left = parseInt(this.chip.style.left) + BOUNCE_MOVE + 'px';
}

isAPit = function(posX, posY){
  return map.getTileAux(posX, posY) >= 8 && map.getTileAux(posX, posY) <= 9;
}

validMovement = function(mov, posX, posY) {
  if ( invalidLeft(mov, posX, posY) || invalidRight(mov, posX, posY) ||
    invalidUp(mov, posY) || invalidDown(mov, posY)){
    return false;
  } else {
    return true;
  }
}

invalidDown = function(mov, posY){
  return mov == 'd' && (posY == '7' || posY == '8');
}

invalidUp = function(mov, posY){
  return mov == 'u' && posY == '0';
}

invalidRight = function(mov, posX, posY){
  return (mov == 'r' && (posX == '7' || posY == '8')) ;
}

invalidLeft = function(mov, posX, posY){
  return (mov == 'l' && (posX == '0' || posY == '8')) ;
}


jumpUp = function (){
  if (isHoleUp(9,12,13)){
    this.chip.style.bottom = parseInt(this.chip.style.bottom) + TILE_SIZE + 'px';
    Game.posY -= 1;
    addJumpEffect();
    switch(map.getTileAux(Game.posX, Game.posY)){
      case 9:
        return 'u';
      case 12:
        return 'r';
      case 13:
        return 'l';
    }
  } else {
    addJumpEffect();
    return 'none';
  }
}

jumpRight = function (){
  if (isHoleRight(8,10,13)){
    this.chip.style.left = parseInt(this.chip.style.left) + TILE_SIZE + 'px';
    Game.posX += 1;
    addJumpEffect();
    switch(map.getTileAux(Game.posX, Game.posY)){
      case 8:
        return 'r';
      case 10:
        return 'u';
      case 13:
        return 'd';
    }
  }  else {
    addJumpEffect();
    return 'none';
  }
}

jumpLeft = function (){
  if (isHoleLeft(8,11,12)){
    this.chip.style.left = parseInt(this.chip.style.left) - TILE_SIZE + 'px';
    Game.posX -= 1;
    addJumpEffect();
    switch(map.getTileAux(Game.posX, Game.posY)){
      case 8:
        return 'l';
      case 11:
        return 'u';
      case 12:
        return 'd';
    }
  } else {
    addJumpEffect();
    return 'none';
  }
}

jumpDown = function (){
  if (isHoleDown(9,10,11)){
    this.chip.style.bottom = parseInt(this.chip.style.bottom) - TILE_SIZE + 'px';
    Game.posY += 1;
    addJumpEffect();
    switch(map.getTileAux(Game.posX, Game.posY)){
      case 9:
        return 'd';
      case 10:
        return 'l';
      case 11:
        return 'r';
    }
  } else {
    addJumpEffect();
    return 'none';
  }
}


isHoleUp = function(tile1, tile2, tile3) {
  return map.getTileAux(Game.posX, Game.posY-1) == tile1 || map.getTileAux(Game.posX, Game.posY-1) == tile2 || map.getTileAux(Game.posX, Game.posY-1) == tile3
}

isHoleRight = function(tile1, tile2, tile3) {
  return map.getTileAux(Game.posX+1, Game.posY) == tile1 || map.getTileAux(Game.posX+1, Game.posY) == tile2 || map.getTileAux(Game.posX+1, Game.posY) == tile3
}

isHoleLeft = function(tile1, tile2, tile3) {
  return map.getTileAux(Game.posX-1, Game.posY) == tile1 || map.getTileAux(Game.posX-1, Game.posY) == tile2 || map.getTileAux(Game.posX-1, Game.posY) == tile3
}

isHoleDown = function(tile1, tile2, tile3) {
  return map.getTileAux(Game.posX, Game.posY+1) == tile1 || map.getTileAux(Game.posX, Game.posY+1) == tile2 || map.getTileAux(Game.posX, Game.posY+1) == tile3
}

addJumpEffect = function (){

  this.chip.style.width =  parseInt(this.chip.offsetWidth) + JUMP_RESIZE + 'px';
  this.chip.style.height =  parseInt(this.chip.offsetHeight) + JUMP_RESIZE + 'px';
  this.chip.style.marginBottom =  '-5px';
  this.chip.style.marginLeft =  '-5px';
  this.chip.style.boxShadow = '0 0 60px #000';

}

removeJumpEffect = function (){
  this.chip.style.marginBottom =  '0px';
  this.chip.style.marginLeft =  '0px';
  this.chip.style.boxShadow = 'none';
  this.chip.style.width =  parseInt(this.chip.style.width) - JUMP_RESIZE + 'px';
  this.chip.style.height =  parseInt(this.chip.style.height) - JUMP_RESIZE + 'px';
}

loseOrWin = function (){
  if (!(Game.posX == Game.winPosX && Game.posY == Game.winPosY)) {
    lose = true;

  }

 $('#user_won').val(!lose);

  Game.audio.pause();

  if(lose){
    allMovements = [];
    setTimeout(
      function() {

        swal({ title: "YOU lose", text: "",
           timer: 2500, showConfirmButton: false }
             )}, 1000);
        setTimeout( function() {
          $('#myModal').modal('show')}, 3500);

  } else {
    setTimeout(
      function() {

        swal({ title: "YOU WIN", text: "",
           timer: 2500, showConfirmButton: false }
             )}, 1000);
        setTimeout( function() {
          $('#myModal').modal('show')}, 3500);

  }
  Game.audio.pause();

}

getTimeRemaining = function (endtime) {
  var t = Date.parse(endtime) - Date.parse(new Date());
  var seconds = Math.floor((t / 1000) % 60);
  return {
    'total': t,
    'seconds': seconds
  };
}

hideMovements = function (){
  var movementDiv = $('#right');
  movementDiv.attr('class', movementDiv.attr('class') + ' hidden')

}



